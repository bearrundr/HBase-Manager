
package com.vg.hbase.manager.ui;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableExistsException;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.util.Bytes;

import com.vg.hbase.comm.manager.HBaseRow;
import com.vg.hbase.comm.manager.HBaseTableData;
import com.vg.hbase.comm.manager.HBaseTableManager;
import com.vg.hbase.comm.manager.HBaseTableStructure;
import com.vg.hbase.comm.manager.HbaseTableObject;
import com.vg.hbase.operations.base.HBaseConfigurationManager;

/**
 * 
 * @author skrishnanunni
 */
public class HbaseDataBackupRestoreDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5959525532772616338L;
	/**
	 * Creates new form HbaseDataBackupRestoreDialog
	 */
	DefaultListModel listBackupSelectedModel , listBackupAllTablesModel;
	DefaultListModel listRestoreSelectedModel , listRestoreupAllTablesModel;

	HbaseTableObject hbTable = new HbaseTableObject();
	HBaseTableData tableData = new HBaseTableData();
	HBaseTableStructure tableStructure = new HBaseTableStructure();
	HashMap<String, List<HbaseTableObject>> tableObjects = new HashMap<String, List<HbaseTableObject>>();
	private static List<HbaseTableObject> restoredTableData;
	static ReadFilesDialog readFilesDialog = null;

	private HBaseTableManager hbaseTableManager = HBaseTableManager.getInstance();

	public HbaseDataBackupRestoreDialog(java.awt.Frame parent, boolean modal) {

		super(parent, modal);
		initComponents();
		this.setTitle("Backup/ Restore your Data");
		listBackupAllTablesModel = (DefaultListModel) listAllTables.getModel();
		listBackupSelectedModel = (DefaultListModel) listSelectedTables.getModel();
		listRestoreupAllTablesModel = (DefaultListModel) listRestoreAllTables.getModel();
		listRestoreSelectedModel = (DefaultListModel) listRestoreSelectedTables.getModel();
		populateAvailableTables();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	@Override
	public void setVisible(boolean arg0) {

		listRestoreSelectedModel.removeAllElements();
		listBackupAllTablesModel.removeAllElements();
		listRestoreupAllTablesModel.removeAllElements();
		listBackupSelectedModel.removeAllElements();
		getLabelFileOperationStatus().setText("Status: Idle");
		if (arg0)
			populateAvailableTables();

		super.setVisible(arg0);
	}

	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		listAllTables = new javax.swing.JList(new DefaultListModel());
		jScrollPane2 = new javax.swing.JScrollPane();
		listSelectedTables = new javax.swing.JList(new DefaultListModel());
		buttonAddAlltoSelectedBox = new javax.swing.JButton();
		buttonRemoveAllFromSelectedBox = new javax.swing.JButton();
		buttonBackupToFile = new javax.swing.JButton();
		buttonMigrate = new javax.swing.JButton();
		buttonCancel = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		labelFileSelect = new javax.swing.JLabel();
		setLabelFileOperationStatus(new javax.swing.JLabel());
		buttonBrowseFile = new javax.swing.JButton();
		jScrollPane3 = new javax.swing.JScrollPane();
		listRestoreAllTables = new javax.swing.JList(new DefaultListModel());
		jScrollPane4 = new javax.swing.JScrollPane();
		listRestoreSelectedTables = new javax.swing.JList(new DefaultListModel());
		buttonAddAlltoSelectedBox2 = new javax.swing.JButton();
		buttonRemoveAllFromSelectedBox2 = new javax.swing.JButton();
		buttonRestore = new javax.swing.JButton();
		buttonExit = new javax.swing.JButton();
		Image image = Toolkit.getDefaultToolkit().getImage("hb.png");
		setIconImage(image);
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		listAllTables.setModel(new DefaultListModel()

		);
		jScrollPane1.setViewportView(listAllTables);
		this.setDefaultStatus();
		jScrollPane2.setViewportView(listSelectedTables);

		buttonAddAlltoSelectedBox.setText(">>");
		buttonAddAlltoSelectedBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonAddAlltoSelectedBoxClicked(evt);
			}
		});

		buttonRemoveAllFromSelectedBox.setText("<<");
		buttonRemoveAllFromSelectedBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonRemoveAllFromSelectedBoxClicked(evt);
			}
		});

		buttonBackupToFile.setText("Backup to File");
		buttonBackupToFile.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				backupToFileButtonClicked(evt);
			}
		});

		buttonMigrate.setText("Migrate");

		buttonCancel.setText("Cancel");
		buttonCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonCancelClicked(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(74, 74, 74).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(buttonAddAlltoSelectedBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(buttonRemoveAllFromSelectedBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(53, 53, 53).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(buttonBackupToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(buttonMigrate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(57, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(37, 37, 37).addComponent(buttonAddAlltoSelectedBox).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(buttonRemoveAllFromSelectedBox).addGap(96, 96, 96)).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(19, 19, 19).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(jPanel1Layout.createSequentialGroup().addGap(57, 57, 57).addComponent(buttonBackupToFile).addGap(26, 26, 26).addComponent(buttonMigrate).addGap(30, 30, 30).addComponent(buttonCancel))).addContainerGap(39, Short.MAX_VALUE)));

		jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		labelFileSelect.setText("Select Backup File :");

		buttonBrowseFile.setText("...");
		buttonBrowseFile.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonBrowseFileClicked(evt);
			}
		});

		listRestoreAllTables.setModel(new DefaultListModel());
		jScrollPane3.setViewportView(listRestoreAllTables);

		jScrollPane4.setViewportView(listRestoreSelectedTables);

		buttonAddAlltoSelectedBox2.setText(">>");
		buttonAddAlltoSelectedBox2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonAddAlltoSelectedBox2(evt);
			}
		});

		buttonRemoveAllFromSelectedBox2.setText("<<");
		buttonRemoveAllFromSelectedBox2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonRemoveAllFromSelectedBox2(evt);
			}
		});

		buttonRestore.setText("Restore");
		buttonRestore.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonRestoreClicked(evt);
			}
		});

		buttonExit.setText("Exit");
		buttonExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				buttonExitClicked(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(27, 27, 27).addComponent(labelFileSelect).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(buttonBrowseFile).addGap(40, 40, 40).addComponent(getLabelFileOperationStatus())).addGroup(jPanel2Layout.createSequentialGroup().addGap(102, 102, 102).addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(buttonAddAlltoSelectedBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(buttonRemoveAllFromSelectedBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(51, 51, 51).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(buttonRestore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(buttonExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))).addContainerGap(80, Short.MAX_VALUE)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addGap(24, 24, 24).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(labelFileSelect).addComponent(buttonBrowseFile).addComponent(getLabelFileOperationStatus())).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane3).addComponent(jScrollPane4)).addContainerGap()).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup().addGap(73, 73, 73).addComponent(buttonAddAlltoSelectedBox2).addGap(18, 18, 18).addComponent(buttonRestore).addGap(18, 18, 18).addComponent(buttonExit).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE).addComponent(buttonRemoveAllFromSelectedBox2).addGap(32, 32, 32)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	public void setDefaultStatus() {

		getLabelFileOperationStatus().setText("Status: Waiting for User action");
	}

	private void backupToFileButtonClicked(java.awt.event.ActionEvent evt) {

		// HBaseTableManager tblmngr = HbaseManagerTableGetter.getTblManager();
		byte[][] colFamilys;

		List<List<HBaseRow>> tableRows;

		final JFileChooser fc = new JFileChooser();
		File backupFile = null;

		fc.showSaveDialog(this);

		backupFile = fc.getSelectedFile();

		try {
			getLabelFileOperationStatus().setText("Backup in progress");
			for (int i = 0; i < listSelectedTables.getModel().getSize(); i++) {
				String tblName = (String) listSelectedTables.getModel().getElementAt(i);// (String)listSelectedTables.
				listSelectedTables.setSelectedValue(tblName, true);
				Logger.getLogger(HbaseDataBackupRestoreDialog.class.getName()).log(Level.INFO, "Table name: " + tblName);
				HBaseTableStructure tableStructure = new HBaseTableStructure();
				tableStructure.createWriteTableStructure(tblName);

				colFamilys = tableStructure.getAllColoumnFamilies();

				ResultScanner resultScan = HBaseTableManager.getAllDataInRangeOfFamily("0", "zz", colFamilys, tblName);

				tableRows = this.getDataObjectList(resultScan, colFamilys);

				Iterator<List<HBaseRow>> iterator = tableRows.iterator();
				List<HBaseRow> rowList;
				List<HbaseTableObject> tableObject = new ArrayList<HbaseTableObject>();
				while (iterator.hasNext()) {

					rowList = iterator.next();
					HbaseTableObject hbTable = new HbaseTableObject();
					HBaseTableData tableData = new HBaseTableData();

					tableData.setHbaseTableData(rowList);
					hbTable.setTableData(tableData);
					hbTable.setTableStructure(tableStructure);
					hbTable.setLastObject(false);
					hbTable.setLinkedFileAvailable(true);

					if (!iterator.hasNext()) {
						hbTable.setLastObject(true);
					}
					tableObject.add(hbTable);

				}

				File targetFile = new File(backupFile.getAbsolutePath().concat("_").concat(tblName));

				BackupRestoreFileUtil fileUtil = new BackupRestoreFileUtil(targetFile);
				long rows = (tableObject.size() - 1) * 20001 + tableObject.get(tableObject.size() - 1).getTableData().getHbaseTableData().size();
				this.getLabelFileOperationStatus().setText("Backup Done: ~ " + rows + " backed-up");
				fileUtil.backupToFiles(tableObject);

				// writeObjectFile.writeObject(hbTable);
				listBackupSelectedModel.remove(0);

			} // write hbTable to file, object stream;

			JOptionPane.showMessageDialog(this, "Backup Complete. \n Backup File : " + fc.getSelectedFile().getName());

		}
		catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Backup Failed.", "Error", JOptionPane.ERROR_MESSAGE);

		}

	}

	private void buttonAddAlltoSelectedBoxClicked(java.awt.event.ActionEvent evt) {

		Object[] sellist = listAllTables.getSelectedValues();
		for (int i = 0; i < sellist.length; i++)
			listBackupSelectedModel.addElement((String) sellist[i]);

	}

	private void buttonRemoveAllFromSelectedBoxClicked(java.awt.event.ActionEvent evt) {

		int[] sellist = listSelectedTables.getSelectedIndices();
		for (int i = 0; i < sellist.length; i++)
			listBackupSelectedModel.remove(listSelectedTables.getSelectedIndex());
	}

	private void buttonBrowseFileClicked(java.awt.event.ActionEvent evt) {

		// HBaseTableManager tblmngr = HbaseManagerTableGetter.getTblManager();
		// byte[][] colFamilys;
		// List<Put> putList = null;
		String tableName = null;
		final JFileChooser fc = new JFileChooser();

		fc.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				getLabelFileOperationStatus().setText("Scanning backup files...Please wait");

				getLabelFileOperationStatus().setVisible(true);

			}
		});

		fc.showOpenDialog(new JLabel("Select the Backup File"));
		File restoreFile = fc.getSelectedFile();

		try {

			BackupRestoreFileUtil fileUtil = new BackupRestoreFileUtil(restoreFile);

			// readFilesDialog = new ReadFilesDialog(new JFrame(), true,
			// fileUtil);
			// readFilesDialog.setVisible(true);
			List<HbaseTableObject> restoredTableData = fileUtil.restoreFromFiles(this);

			if (restoredTableData.size() > 0) {

				tableName = restoredTableData.get(0).getTableStructure().getHTableName();
				listRestoreupAllTablesModel.addElement(tableName);
				tableObjects.put(tableName, restoredTableData);
				long rows = (restoredTableData.size() - 1) * 20001 + restoredTableData.get(restoredTableData.size() - 1).getTableData().getHbaseTableData().size();
				this.getLabelFileOperationStatus().setText("Status: Completed Reading Files (~" + rows + "rows available)");
			}
			else {
				JOptionPane.showMessageDialog(this, "Nothing to restore", "Warning", JOptionPane.WARNING_MESSAGE);
			}

		}
		catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Failed to find valid rows", "Error", JOptionPane.ERROR_MESSAGE);

		}

	}

	private void buttonRestoreClicked(java.awt.event.ActionEvent evt) {

		String tableName = null;
		getLabelFileOperationStatus().setText("Restoring in progress");
		for (int i = 0; i < listRestoreSelectedTables.getModel().getSize(); i++) {
			try {

				tableName = (String) listRestoreSelectedTables.getModel().getElementAt(i);
				listRestoreSelectedTables.setSelectedValue(tableName, true);
				List<HbaseTableObject> objectlist = tableObjects.get(tableName);
				Iterator<HbaseTableObject> iterator = objectlist.iterator();
				boolean createdTable = false;
				totalRows = 0L;
				while (iterator.hasNext()) {
					hbTable = iterator.next();

					tableData = hbTable.getTableData();
					tableStructure = hbTable.getTableStructure();

					HTableDescriptor descriptor = tableStructure.createReadTableStructure();
					if (!createdTable) {
						createTable(descriptor, createdTable);
						createdTable = true;
					}
					this.addDataToTable(tableData, HBaseTableManager.getTable(tableStructure.getHTableName()));
				}
				JOptionPane.showMessageDialog(this, "Table : " + listRestoreSelectedTables.getSelectedValue() + " Restored");
				listRestoreSelectedTables.setSelectedValue(tableName, false);

			}

			catch (Exception e) {
				System.out.print("Restore of " + tableName + " Failed" + ExceptionUtils.getFullStackTrace(e));
				break;
			}

		}
		JOptionPane.showMessageDialog(this, "All tables restored successfully");
		restoredTableData = null;

	}

	private void buttonAddAlltoSelectedBox2(java.awt.event.ActionEvent evt) {

		Object[] sellist = listRestoreAllTables.getSelectedValues();
		for (int i = 0; i < sellist.length; i++)
			listRestoreSelectedModel.addElement((String) sellist[i]);

	}

	private void buttonRemoveAllFromSelectedBox2(java.awt.event.ActionEvent evt) {

		int[] sellist = listRestoreSelectedTables.getSelectedIndices();
		for (int i = 0; i < sellist.length; i++)
			listRestoreSelectedModel.remove(listRestoreSelectedTables.getSelectedIndex());

	}

	private void buttonExitClicked(java.awt.event.ActionEvent evt) {

		this.dispose();
	}

	private void buttonCancelClicked(java.awt.event.ActionEvent evt) {

		this.dispose();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {

		/*
		 * Set the Nimbus look and feel
		 */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(HbaseDataBackupRestoreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(HbaseDataBackupRestoreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(HbaseDataBackupRestoreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(HbaseDataBackupRestoreDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/*
		 * Create and display the dialog
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {

				HbaseDataBackupRestoreDialog dialog = new HbaseDataBackupRestoreDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {

						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton buttonAddAlltoSelectedBox;
	private javax.swing.JButton buttonExit;
	private javax.swing.JButton buttonRemoveAllFromSelectedBox;
	private javax.swing.JButton buttonBackupToFile;
	private javax.swing.JButton buttonMigrate;
	private javax.swing.JButton buttonCancel;
	private javax.swing.JButton buttonBrowseFile;
	private javax.swing.JButton buttonAddAlltoSelectedBox2;
	private javax.swing.JButton buttonRemoveAllFromSelectedBox2;
	private javax.swing.JButton buttonRestore;
	private javax.swing.JLabel labelFileSelect;
	private javax.swing.JLabel labelFileOperationStatus;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JList listAllTables;
	private javax.swing.JList listRestoreAllTables;
	private javax.swing.JList listRestoreSelectedTables;
	private javax.swing.JList listSelectedTables;
	private static Long totalRows;

	// End of variables declaration

	private void createTable(HTableDescriptor tableDesc, boolean ignoreTableExists) {

		HBaseAdmin admin = HBaseConfigurationManager.getHbaseAdmin();

		try {

			admin.createTable(tableDesc);
			JOptionPane.showMessageDialog(this, "Table Created and Enabled Successfully");
		}
		catch (TableExistsException e) {
			if (!ignoreTableExists) {
				int sel = JOptionPane.showConfirmDialog(this, "Table Already Exist, Add Data ???", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

				if (sel == JOptionPane.NO_OPTION) {
					this.dispose();
				}
			}

		}
		catch (IOException ex) {
			JOptionPane.showMessageDialog(this, "Table Creation Failed", "Error", JOptionPane.ERROR_MESSAGE);
			Logger.getLogger(HBaseManagerTableDesign.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	private void addDataToTable(HBaseTableData tableData, HTable table) {

		try {

			List<HBaseRow> tableDataRows = tableData.getHbaseTableData();

			Iterator<HBaseRow> rowIterator = tableDataRows.iterator();

			while (rowIterator.hasNext()) {
				HBaseRow tableDataFromRows = rowIterator.next();
				getLabelFileOperationStatus().setText("Status: Written " + totalRows + " rows");
				totalRows++;
				tableDataFromRows.putRow(table);

			}

		}
		catch (Exception e) {
			System.out.println("Exception in adding data to : " + Bytes.toString(table.getTableName()));
			System.out.println("Stacktrace: " + ExceptionUtils.getFullStackTrace(e));

		}

	}

	private void populateAvailableTables() {

		listBackupAllTablesModel.removeAllElements();
		String[] tables = HBaseTableManager.getAllTableNames();
		for (int i = 0; i < tables.length; i++)
			listBackupAllTablesModel.addElement(tables[i]);

	}

	private List<List<HBaseRow>> getDataObjectList(ResultScanner resultScan, byte[][] families) {

		List<HBaseRow> rows = new ArrayList<HBaseRow>();

		List<List<HBaseRow>> allrows = new ArrayList<List<HBaseRow>>();

		int count = 0;

		Long totalRow = 0L;
		for (Result result : resultScan) {

			count++;
			getLabelFileOperationStatus().setText("Status: Written " + totalRow + " rows");
			totalRow++;
			HBaseRow row = new HBaseRow(result, families);
			rows.add(row);
			if (count > 20000) {
				System.out.println("Copied next " + count + " rows. Starting on next file");
				count = 0;
				allrows.add(rows);
				rows = new ArrayList<HBaseRow>();
				rows.clear();

			}

		}
		if (!(count > 20000)) {
			System.out.println("Copied next " + count + " rows.Finished");
			count = 0;
			allrows.add(rows);
		}
		return allrows;
	}

	public javax.swing.JLabel getLabelFileOperationStatus() {

		return labelFileOperationStatus;
	}

	public void setLabelFileOperationStatus(javax.swing.JLabel labelFileOperationStatus) {

		this.labelFileOperationStatus = labelFileOperationStatus;
	}

	public static List<HbaseTableObject> getRestoredTableData() {

		return restoredTableData;
	}

	public static void setRestoredTableData(List<HbaseTableObject> restoredTableData, ReadFilesDialog dialog) {

		HbaseDataBackupRestoreDialog.restoredTableData = restoredTableData;
		dialog.setVisible(false);

	}
}
