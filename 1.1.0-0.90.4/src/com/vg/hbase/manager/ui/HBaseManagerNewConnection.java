package com.vg.hbase.manager.ui;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.vg.hbase.operations.base.HbaseManagerStatic;
import com.vg.hbase.operations.base.HbaseManagerTableGetter;

/**
 * 
 * @author skrishnanunni
 */
public class HBaseManagerNewConnection extends javax.swing.JDialog {
    
    /**
     * 
     */
    private static final long serialVersionUID = 7185802611190755780L;
    /**
     * Creates new form HBaseManagerNewConnection
     */
    private static boolean LISTEN_NOW = false;
    private static boolean SAVE_NEEDED = false;
    private static String DIRTY_ITEM = null;
    
    HashMap<String, String[]> connectionMap = new HashMap<String, String[]>();
    HashMap<String, ConnectionOb> objectMap = new HashMap<String, ConnectionOb>();
    
    // private int comboSelectedIndex = 0;
    
    public HBaseManagerNewConnection(java.awt.Frame parent, boolean modal) {
	super(parent, modal);
	initComponents();
	clickSaveConnection.setVisible(false);
	readConnections();
	SAVE_NEEDED = false;
	labelErrorConnection.setVisible(false);
	
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {
	
	jPanel1 = new javax.swing.JPanel();
	clickNewConnection = new javax.swing.JButton();
	clickSaveConnection = new javax.swing.JButton();
	clickDeleteConnection = new javax.swing.JButton();
	jLabel1 = new javax.swing.JLabel();
	comboConnectionList = new javax.swing.JComboBox();
	jPanel2 = new javax.swing.JPanel();
	jLabel2 = new javax.swing.JLabel();
	jLabel3 = new javax.swing.JLabel();
	jLabel4 = new javax.swing.JLabel();
	valueQuorum = new javax.swing.JTextField();
	valueClientPort = new javax.swing.JTextField();
	valueHbaseMaster = new javax.swing.JTextField();
	labelErrorConnection = new javax.swing.JLabel();
	jPanel3 = new javax.swing.JPanel();
	clickConnectHbase = new javax.swing.JButton();
	clickCancel = new javax.swing.JButton();
	
	setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
	setTitle("HBase Manager - Connections");
	
	clickNewConnection.setText("New..");
	clickNewConnection.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		clickNewConnectionActionPerformed(evt);
	    }
	});
	
	clickSaveConnection.setText("Save");
	clickSaveConnection.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		clickSaveConnectionActionPerformed(evt);
	    }
	});
	
	clickDeleteConnection.setText("Delete");
	clickDeleteConnection.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		clickDeleteConnectionActionPerformed(evt);
	    }
	});
	
	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	jPanel1.setLayout(jPanel1Layout);
	jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel1Layout
				.createSequentialGroup()
				.addContainerGap()
				.addComponent(clickNewConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 74,
					javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(clickSaveConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 80,
					javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(clickDeleteConnection, javax.swing.GroupLayout.DEFAULT_SIZE, 129,
					Short.MAX_VALUE)));
	jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel1Layout
				.createSequentialGroup()
				.addContainerGap()
				.addGroup(
					jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(clickNewConnection).addComponent(clickSaveConnection)
						.addComponent(clickDeleteConnection))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	
	jLabel1.setText("Saved Connections :");
	
	comboConnectionList.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		comboConnectionListActionPerformed(evt);
	    }
	});
	
	jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
	
	jLabel2.setText("hbase.zookeeper.quorum :");
	
	jLabel3.setText("hbase.zookeeper.property.clientPort:");
	
	jLabel4.setText("hbase.master:");
	
	valueQuorum.getDocument().addDocumentListener(new DocumentListener() {
	    public void changedUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void removeUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void insertUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	});
	valueQuorum.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		valueQuorumActionPerformed(evt);
	    }
	});
	
	valueClientPort.getDocument().addDocumentListener(new DocumentListener() {
	    public void changedUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void removeUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void insertUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	});
	valueClientPort.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		valueClientPortActionPerformed(evt);
	    }
	});
	
	valueHbaseMaster.getDocument().addDocumentListener(new DocumentListener() {
	    public void changedUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void removeUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	    
	    public void insertUpdate(DocumentEvent e) {
		textBoxValueChanged();
	    }
	});
	valueHbaseMaster.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		valueHbaseMasterActionPerformed(evt);
	    }
	});
	
	javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
	jPanel2.setLayout(jPanel2Layout);
	jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel2Layout
				.createSequentialGroup()
				.addGroup(
					jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
						.addComponent(jLabel4).addComponent(jLabel3).addComponent(jLabel2))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(
					jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(valueQuorum)
						.addComponent(valueClientPort)
						.addComponent(valueHbaseMaster,
							javax.swing.GroupLayout.Alignment.TRAILING,
							javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
				.addContainerGap()));
	jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel2Layout
				.createSequentialGroup()
				.addGap(54, 54, 54)
				.addGroup(
					jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jLabel2)
						.addComponent(valueQuorum, javax.swing.GroupLayout.PREFERRED_SIZE,
							javax.swing.GroupLayout.DEFAULT_SIZE,
							javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(
					jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jLabel3)
						.addComponent(valueClientPort, javax.swing.GroupLayout.PREFERRED_SIZE,
							javax.swing.GroupLayout.DEFAULT_SIZE,
							javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addGroup(
					jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jLabel4)
						.addComponent(valueHbaseMaster, javax.swing.GroupLayout.PREFERRED_SIZE,
							javax.swing.GroupLayout.DEFAULT_SIZE,
							javax.swing.GroupLayout.PREFERRED_SIZE))
				.addContainerGap(61, Short.MAX_VALUE)));
	
	labelErrorConnection.setForeground(new java.awt.Color(255, 51, 51));
	labelErrorConnection.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	labelErrorConnection.setText("The Connection attempt Failed! Check your Connection Parameters");
	
	clickConnectHbase.setText("Connect");
	clickConnectHbase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	clickConnectHbase.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		clickConnectHbaseActionPerformed(evt);
	    }
	});
	
	clickCancel.setText("Cancel");
	clickCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	clickCancel.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		clickCancelActionPerformed(evt);
	    }
	});
	
	javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
	jPanel3.setLayout(jPanel3Layout);
	jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel3Layout.createSequentialGroup().addContainerGap(119, Short.MAX_VALUE)
				.addComponent(clickConnectHbase)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(clickCancel).addGap(134, 134, 134)));
	jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			jPanel3Layout
				.createSequentialGroup()
				.addContainerGap()
				.addGroup(
					jPanel3Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(clickConnectHbase)
						.addComponent(clickCancel, javax.swing.GroupLayout.DEFAULT_SIZE,
							javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addContainerGap()));
	
	javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	getContentPane().setLayout(layout);
	layout.setHorizontalGroup(layout
		.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(
			layout.createSequentialGroup()
				.addGroup(
					layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
							layout.createSequentialGroup()
								.addGap(40, 40, 40)
								.addGroup(
									layout.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(
											jPanel1,
											javax.swing.GroupLayout.PREFERRED_SIZE,
											javax.swing.GroupLayout.DEFAULT_SIZE,
											javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(
											layout.createSequentialGroup()
												.addGap(16, 16, 16)
												.addComponent(jLabel1)
												.addPreferredGap(
													javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(
													comboConnectionList,
													javax.swing.GroupLayout.PREFERRED_SIZE,
													170,
													javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addGroup(
							layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jPanel2,
									javax.swing.GroupLayout.PREFERRED_SIZE,
									javax.swing.GroupLayout.DEFAULT_SIZE,
									javax.swing.GroupLayout.PREFERRED_SIZE)))
				.addGap(0, 22, Short.MAX_VALUE))
		.addComponent(labelErrorConnection, javax.swing.GroupLayout.DEFAULT_SIZE,
			javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
			Short.MAX_VALUE));
	layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
		layout.createSequentialGroup()
			.addContainerGap()
			.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addGap(33, 33, 33)
			.addGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(jLabel1)
					.addComponent(comboConnectionList, javax.swing.GroupLayout.PREFERRED_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.PREFERRED_SIZE))
			.addGap(18, 18, 18)
			.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			.addComponent(labelErrorConnection)
			.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGap(14, 14, 14)));
	
	pack();
    }// </editor-fold>
    
    private void clickNewConnectionActionPerformed(java.awt.event.ActionEvent evt) {
	String newConnectionName = JOptionPane.showInputDialog(this, "Name New Connection:",
		"HBase Manager: New Connection", JOptionPane.QUESTION_MESSAGE);
	String emptyConfig[] = new String[3];
	emptyConfig[0] = "0.0.0.0";
	emptyConfig[1] = "000";
	emptyConfig[2] = "0.0.0.0";
	connectionMap.put(newConnectionName, emptyConfig);
	comboConnectionList.addItem(newConnectionName);
	comboConnectionList.setSelectedItem(newConnectionName);
	clearInputs();
	clickSaveConnection.setVisible(false);
	
    }
    
    private void comboConnectionListActionPerformed(java.awt.event.ActionEvent evt) {
	
	if (LISTEN_NOW) {
	    
	    checkSaveNeeded();
	    String currentConnection = (String) comboConnectionList.getSelectedItem();
	    
	    String connDetails[] = new String[3];
	    
	    connDetails = connectionMap.get(currentConnection);
	    
	    valueClientPort.setText(connDetails[1]);
	    valueQuorum.setText(connDetails[0]);
	    valueHbaseMaster.setText(connDetails[2]);
	    SAVE_NEEDED = false;
	    
	}
	clickSaveConnection.setVisible(false);
	
    }
    
    private void clickConnectHbaseActionPerformed(java.awt.event.ActionEvent evt) {
	
	// writeAllConnectionsBack
	labelErrorConnection.setVisible(false);
	checkSaveNeeded();
	
	String[] conDetails = connectionMap.get(comboConnectionList.getSelectedItem());
	HbaseManagerStatic.setHBASE_ZOOKEEPER_QUORUM(conDetails[0]);
	HbaseManagerStatic.setHBASE_ZOOKEEPER_PROPERTY_CLIENT_PORT(conDetails[1]);
	HbaseManagerStatic.setHBASE_MASTER(conDetails[2]);
	
	clickConnectHbase.setEnabled(false);
	new HbaseManagerTableGetter().resetTableManager();
	
	if (HbaseManagerStatic.SERVER_ERROR) {
	    clickConnectHbase.setEnabled(true);
	    
	    labelErrorConnection.setVisible(true);
	    HbaseManagerStatic.SERVER_ERROR = false;
	    HbaseManagerStatic.SERVER_NOT_CONNECTED = true;
	    
	    this.setVisible(true);
	} else {
	    HbaseManagerStatic.SERVER_NOT_CONNECTED = false;
	    clickConnectHbase.setEnabled(true);
	    this.setVisible(false);
	}
	
    }
    
    private void clickCancelActionPerformed(java.awt.event.ActionEvent evt) {
	
	// writeNewConnection();
	checkSaveNeeded();
	HbaseManagerStatic.SERVER_NOT_CONNECTED = true;
	this.dispose();
    }
    
    private void clickSaveConnectionActionPerformed(java.awt.event.ActionEvent evt) {
	
	String conEdited[] = new String[3];
	String ConnectionName = (String) comboConnectionList.getSelectedItem();
	conEdited[1] = valueClientPort.getText();
	conEdited[2] = valueHbaseMaster.getText();
	conEdited[0] = valueQuorum.getText();
	connectionMap.put(ConnectionName, conEdited);
	clickSaveConnection.setVisible(false);
	SAVE_NEEDED = false;
	
	writeNewConnection();
	
    }
    
    private void clickDeleteConnectionActionPerformed(java.awt.event.ActionEvent evt) {
	String ConnectionName = (String) comboConnectionList.getSelectedItem();
	connectionMap.remove(ConnectionName);
	comboConnectionList.remove(comboConnectionList.getSelectedIndex());
	
    }
    
    private void valueQuorumActionPerformed(java.awt.event.ActionEvent evt) {
	// clickSaveConnection.setVisible(true);
    }
    
    private void valueClientPortActionPerformed(java.awt.event.ActionEvent evt) {
	// TODO add your handling code here:
    }
    
    private void valueHbaseMasterActionPerformed(java.awt.event.ActionEvent evt) {
	// TODO add your handling code here:
    }
    
    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
	/*
	 * Set the Nimbus look and feel
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Look and feel setting code (optional) ">
	/*
	 * If Nimbus (introduced in Java SE 6) is not available, stay with the
	 * default look and feel. For details see
	 * http://download.oracle.com/javase
	 * /tutorial/uiswing/lookandfeel/plaf.html
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	}
	catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(
		    java.util.logging.Level.SEVERE, null, ex);
	}
	catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(
		    java.util.logging.Level.SEVERE, null, ex);
	}
	catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(
		    java.util.logging.Level.SEVERE, null, ex);
	}
	catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(
		    java.util.logging.Level.SEVERE, null, ex);
	}
	// </editor-fold>
	
	/*
	 * Create and display the dialog
	 */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    
	    public void run() {
		HBaseManagerNewConnection dialog = new HBaseManagerNewConnection(new javax.swing.JFrame(), true);
		dialog.addWindowListener(new java.awt.event.WindowAdapter() {
		    
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent e) {
			System.exit(0);
		    }
		});
		dialog.setVisible(true);
	    }
	});
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton clickCancel;
    private javax.swing.JButton clickConnectHbase;
    private javax.swing.JButton clickDeleteConnection;
    private javax.swing.JButton clickNewConnection;
    private javax.swing.JButton clickSaveConnection;
    private javax.swing.JComboBox comboConnectionList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelErrorConnection;
    private javax.swing.JTextField valueClientPort;
    private javax.swing.JTextField valueHbaseMaster;
    private javax.swing.JTextField valueQuorum;
    
    // End of variables declaration
    private void textBoxValueChanged() {
	clickSaveConnection.setVisible(true);
	
	DIRTY_ITEM = (String) comboConnectionList.getSelectedItem();
	
	SAVE_NEEDED = true;
	// saveConnection =true;
	
    }
    
    private void readConnections() {
	
	if ((comboConnectionList.getItemCount()) > 1) {
	    comboConnectionList.removeAllItems();
	    
	}
	
	try {
	    ObjectInputStream savedList = null;
	    ConnectionOb connectionOb;
	    String[] conDetails = new String[4];
	    
	    File connectionListFile = new File("connectionList.con");
	    savedList = new ObjectInputStream(new FileInputStream(connectionListFile));
	    
	    while (true) {
		try {
		    connectionOb = (ConnectionOb) savedList.readObject();
		    conDetails = connectionOb.getConnectionOb();
		    connectionMap.put(conDetails[3], conDetails);
		    System.out.print("Reading Connection" + conDetails[3]);
		}
		catch (Exception e) {
		    System.out.print("Reading Connection Exception ");
		    break;
		}
		
	    }
	    
	    savedList.close();
	    
	    this.addConnectionToList();
	}
	catch (IOException ex) {
	    Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(Level.SEVERE, null, ex);
	}
	
    }
    
    private void writeNewConnection() {
	
	ObjectOutputStream listSave = null;
	String[] conDetails = new String[3];
	
	try {
	    File connectionListFile = new File("connectionList.con");
	    listSave = new ObjectOutputStream(new FileOutputStream(connectionListFile, false));
	    String keyString[] = new String[connectionMap.size()];
	    connectionMap.keySet().toArray(keyString);
	    
	    for (int i = 0; i < connectionMap.size(); i++) {
		System.out.print("Writing Connection" + keyString[i]);
		
		conDetails = connectionMap.get(keyString[i]);
		ConnectionOb conOb = new ConnectionOb(keyString[i], conDetails[0], conDetails[1], conDetails[2]);
		listSave.writeObject(conOb);
		
	    }
	    
	}
	catch (IOException ex) {
	    Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(Level.SEVERE, null, ex);
	}
	finally {
	    try {
		listSave.close();
		
	    }
	    catch (IOException ex) {
		Logger.getLogger(HBaseManagerNewConnection.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
	
    }
    
    private void addConnectionToList() {
	LISTEN_NOW = true;
	
	String[] keySet = new String[connectionMap.size()];
	connectionMap.keySet().toArray(keySet);
	
	System.out.print("Adding:" + keySet.length);
	
	for (int i = 0; i < keySet.length; i++) {
	    System.out.print("Adding:" + keySet[i]);
	    comboConnectionList.addItem(keySet[i]);
	    
	}
	
	clickSaveConnection.setVisible(false);
	
    }
    
    private void clearInputs() {
	
	valueClientPort.setText("000");
	valueHbaseMaster.setText("0.0.0.0");
	valueQuorum.setText("0.0.0.0");
    }
    
    private void checkSaveNeeded() {
	if (SAVE_NEEDED) {
	    comboConnectionList.setSelectedItem(DIRTY_ITEM);
	    DIRTY_ITEM = "";
	    int result = JOptionPane.showConfirmDialog(this,
		    "The new connection is not Saved, Do you want to save it?", "Save Connection",
		    JOptionPane.YES_NO_OPTION);
	    if (result == 0) {
		clickSaveConnectionActionPerformed(null);
		SAVE_NEEDED = false;
		
	    }
	    
	}
	
    }
    
}

class ConnectionOb implements Serializable {
    
    /**
     * 
     */
    private static final long serialVersionUID = -4292464190813233662L;
    
    public ConnectionOb(String ConName, String hQuorum, String hPort, String hMaster) {
	this.ClientPort = hPort;
	this.Master = hMaster;
	this.ConnectionName = ConName;
	this.Quorum = hQuorum;
    }
    
    public String[] getConnectionOb() {
	String conOb[] = new String[4];
	conOb[3] = this.ConnectionName;
	conOb[0] = this.Quorum;
	conOb[1] = this.ClientPort;
	conOb[2] = this.Master;
	
	return conOb;
	
    }
    
    public String Quorum;
    public String ClientPort;
    public String Master;
    public String ConnectionName;
}
